 public tipoNo remover(tipoNo raiz, int info) {
         if (raiz == null)
        return raiz;

    if (info < raiz.info)
        raiz.esq = remover(raiz.esq, info);
    else if (info > raiz.info)
        raiz.dir = remover(raiz.dir, info);
    else {
        // Nó com apenas um filho ou nenhum filho
        if ((raiz.esq == null) || (raiz.dir == null)) {
            tipoNo temp = null;
            if (temp == raiz.esq)
                temp = raiz.dir;
            else
                temp = raiz.esq;

            // Caso sem filho
            if (temp == null) {
                temp = raiz;
                raiz = null;
            } else // Caso com um filho
                raiz = temp;
        } else {
            // Nó com dois filhos: obter o sucessor in-order (menor valor na subárvore direita)
            tipoNo temp = minValueNode(raiz.dir);

            // Copiar o conteúdo do sucessor para este nó
            raiz.info = temp.info;

            // Remover o sucessor
            raiz.dir = remover(raiz.dir, temp.info);
        }
    }

    // Se a árvore tinha apenas um nó, então retorna
    if (raiz == null)
        return raiz;

    // Atualizar a altura do nó atual
    raiz.alt = Math.max(alt(raiz.esq), alt(raiz.dir)) + 1;

    // Obter o fator de equilíbrio deste nó para verificar se houve desequilíbrio
    int balance = getEquilibrio(raiz);

    // 4 casos de desequilíbrio

    // Rotação à direita simples
    if (balance > 1 && getEquilibrio(raiz.esq) >= 0)
        return dirSimples(raiz);

    // Rotação à esquerda simples
    if (balance < -1 && getEquilibrio(raiz.dir) <= 0)
        return esqSimples(raiz);

    // Rotação à esquerda-direita (rotação à esquerda raiz filho esquerdo e, em seguida, rotação à direita raiz nó atual)
    if (balance > 1 && getEquilibrio(raiz.esq) < 0) {
        raiz.esq = esqSimples(raiz.esq);
        return dirSimples(raiz);
    }

    // Rotação à direita-esquerda (rotação à direita raiz filho direito e, em seguida, rotação à esquerda raiz nó atual)
    if (balance < -1 && getEquilibrio(raiz.dir) > 0) {
        raiz.dir = dirSimples(raiz.dir);
        return esqSimples(raiz);
    }

    return raiz;
    }